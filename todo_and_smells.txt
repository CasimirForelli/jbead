Code Smells
-----------

custom define the default colors so that they are exactly
as in dbbead, use named constants instead of directly
allocating the colors, do not use predefined, system
colors.

Now the color (index) is of type byte, thus there are
only 127 colors possible. In practice the limit is 9.
But maybe it would pay to extend this to short or int.
On the other hand, this would double or quadruple the
size of BeadField and the file format would also change.
Not exactly a code smell, but a smelly artificial limit.

The various mouse event handler have now state checked
in if-else-statements. Better to encapsulate this using
the State pattern.

Handle the UI state better. For example, the copy/arrange
function should be disabled if no selection exists. This
was handled using the idleHandler before. Now, this should
probably be done using Actions.

The redraw of normal and simulation does not go up to the
upper border. Instead it works til maxj and this gets
corrected, thus there are some lines at the top, that are
not painted.

Handle the scrolled-stuff better, i. e. use physical
versus logical coordinates or something like that.

Use abstracted tool object for the different tools.

Make simulation view editable analogously to the normal
corrected view.

Make color choosing very simple. Slider style as in the video
of Bret Victor.

Add a "surprise me" color mode, where you click a button and
the colors are randomly changed. Maybe some modes are supported,
very random, tone-in-tone, contrasting colors, ...

Easily set background color. This maybe is just color0. But
why not a fill mode that fills not only a line, but like water
everything reachable downwards. This would be very general.

Create good documentation on the web.

Create screencasts about jbead and post on the web and on youtube.

Push documents to storage on the web. There is a user id and a
passphrase to be configured and this defines where to store and
what is visible. Also, on the web there is a manage page, where
it is possible to publish patterns. These patterns are then
available for download via the webpage or for querying from the
program. Add metadata to the patterns. The server creates on the
fly a thumbnail, or maybe the uploading program does. The program
can query the personal document or all published ones according
to metadata (tags).

Use BeadList to generate further reports, e.g. stats of beads 
(how many of which color, ...)

Add a keyboard interface to the program analogously to dbweave
so that it is possible to enter patterns with the keyboard and
do selections and so on.

Move selection with mouse. Modi: move, copy, copy without
background (=color0).

Split file formats, dbb = old v1, jbb = new v2. jbead can read/write
dbb but write only if no new features are used.

Export as PDF/PNG/JPEG.

Export the circling simulation as an animated GIF or an AVI or 
something.

Split toolbars: edit, tools, colors. This allows to move the
toolbars around. Would probably be good to persist the toolbar
placement.

Add in lower right corner a resize widget. Right now it is a pain...

Allow a single line selection.

Add ctrl+c,x,v for selections. This requires that a current input
point (cursor) is available.

Fix printing code, support multipage printing. Use a layout model
for laying out the pages and then in a second step, print the
required page.

Line drawing: use vertical, horizontal or diagonal lines whichever
is closest to the dragged line. Currently only exact vertical and
horizontal lines are used in all other cases the diagonal is used.
This leads to very short inadvertent diagonal lines.

Also line drawing: offer a mode to draw lines in free angles.

Line drawing: why not provide a line mode that draws corrected
vertical lines. Thus such lines would have a left-tilt in the draft
but would be quite vertical in the corrected and simulated panel.

Make model height adjustable. Also update the scrollbar, obviously.
