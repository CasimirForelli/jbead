Code Smells
-----------

The various mouse event handler have now state checked
in if-else-statements. Better to encapsulate this using
the State pattern.

Handle the UI state better. For example, the copy/arrange
function should be disabled if no selection exists. This
was handled using the idleHandler before. Now, this should
probably be done using Actions.

Handle the scrolled-stuff better, i. e. use physical
versus logical coordinates or something like that.

Use abstracted tool object for the different tools.

Make simulation view editable analogously to the normal
corrected view.

Make color choosing very simple. Slider style as in the video
of Bret Victor.

Add a "surprise me" color mode, where you click a button and
the colors are randomly changed. Maybe some modes are supported,
very random, tone-in-tone, contrasting colors, ...

Easily set background color. This maybe is just color0. But
why not a fill mode that fills not only a line, but like water
everything reachable downwards. This would be very general.

Create good documentation on the web.

Create screencasts about jbead and post on the web and on youtube.

Push documents to storage on the web. There is a user id and a
passphrase to be configured and this defines where to store and
what is visible. Also, on the web there is a manage page, where
it is possible to publish patterns. These patterns are then
available for download via the webpage or for querying from the
program. Add metadata to the patterns. The server creates on the
fly a thumbnail, or maybe the uploading program does. The program
can query the personal document or all published ones according
to metadata (tags).

Use BeadList to generate further reports, e.g. stats of beads 
(how many of which color, ...)

Add a keyboard interface to the program analogously to dbweave
so that it is possible to enter patterns with the keyboard and
do selections and so on.

Move selection with mouse. Modi: move, copy, copy without
background (=color0).

Export as PDF/PNG/JPEG.

Export the circling simulation as an animated GIF or an AVI or 
something.

Add in lower right corner a resize widget. Right now it is a pain...

Allow a single line selection.

Add ctrl+c,x,v for selections. This requires that a current input
point (cursor) is available.

Fix printing code, support multipage printing. Use a layout model
for laying out the pages and then in a second step, print the
required page.

Line drawing: use vertical, horizontal or diagonal lines whichever
is closest to the dragged line. Currently only exact vertical and
horizontal lines are used in all other cases the diagonal is used.
This leads to very short inadvertent diagonal lines.

Also line drawing: offer a mode to draw lines in free angles.

Line drawing: why not provide a line mode that draws corrected
vertical lines. Thus such lines would have a left-tilt in the draft
but would be quite vertical in the corrected and simulated panel.

Line drawing: draw lines in corrected/simulation panels!

Save width AND height in v2 file format so that differing heights
can be used. Use the default or legacy size for the v1 file format.

Move the setWidth and setHeight code from beadform to the actions.

Add/remove Beads at the start of the pattern (or at the current 
location if this is implemented). This allows to "rotate" the pattern 
or to add/remove beads in a very fine-grained way. (Currently, only
whole lines can be inserted and only at the start of the pattern.)

There is a redraw bug in the simulation. It is visible in the hearts
sample file. The partial beads at the left end are not drawn.

Undo should also undo color changes! Currently this is not part of
the undo snapshot.

The arrange function should use more sensible defaults. For example
if the selection is as wide as the pattern, then the horzontal
displacement should be initialized to 0. Also the vertical displacement
should be the height of the selection.

Currently, only the ObjectModel supports path methods. But maybe it
would be better if the Node itself supports paths. This would allow
to get a subnode and then handle it as if it were the whole ObjectModel.

Make author and notes fields available per documents (File|Properties).

The toolsGroup is quite smelly, it should work with mnemonics instead
of the raw integer index.